#!/usr/bin/env bash
#      __                _         _____   ____    __
#     / /   __  ______  (_)  __   / ___/  / __ \  / /
#    / /   / / / / __ \/ / |/_/   \__ \  / /_/ / / /
#   / /___/ /_/ / / / / />  <    ___/ / / _, _/ / /____
#  /_____/\__,_/_/ /_/_/_/|_|   /____(_)_/ |_(_)_____(_)
#
# Creado por Pablo Ramos
# https://gitlab.lunix.com.ar/pramos/borg_config
#
# Dependencies:
#  borgbackup (https://github.com/borgbackup/borg)
    
VERSION="0.1"
DIR=/tmp/
ERROR=0
CONFIG="/etc/lunix/borg/borg.conf"

#Colores de texto
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)

#Numeros
NUM_CHECK='^[0-9]+$'


show_help() {
    echo "uso: borg_tools"
    echo " "
    echo "${BOLD}borg_tools"
    echo "Herramienta de utilidades para borg de Lunix S.R.L."
    echo "Se ejecuta en un cliente con un archivo de configuración presente"
    echo "o indicando el archivo de configuración de forma manual"
    echo ""
    echo "${NORMAL}argumentos opcionales:"
    echo "   -c | --config              Utiliza el archivo de configuración"
    echo "                              especificado en lugar del por defecto"
    echo "   -h | --help                Muestra este mensaje"
    echo "   -v | --version             Muestra la version del script"
}

main_loop() {
    echo "1) Información del repositorio"
    echo "2) Listar los ultimos 10 backups"
    echo "3) Extraer el contenido de un backup"
    echo "4) Montar un backup"
    echo "5) Desmontar un backup"
    echo "6) Chequear el repositorio"
    echo "6) Salir"
    read -p "Opción (1-6): " OPT
    case $OPT in
        1)
            $BORG_BIN info ;;
        2)
            $BORG_BIN list --last 10 --short ;;
        6)
            exit ;;
        *)
            echo "Opción no valida" && exit ;;
    esac
}

borg_info() {
    if [ -z $INFO_ARG ]; then
        $BORG_BIN info
    else
        $BORG_BIN info $BORG_REPO::$INFO_ARG
    fi
}

borg_list() {
    if [ -z $LIST_ARG ]; then
        $BORG_BIN list --last 5
    else
        if [[ $LIST_ARG =~ $NUM_CHECK ]]; then
            $BORG_BIN list --last $LIST_ARG
        else 
            echo "El argumento de ${RED}list ${NORMAL}debe ser un numero"
        fi
    fi
}

borg_mount() {
    if [ -z $MOUNT_ARG ]; then
        MOUNT_ARG=$( $BORG_BIN list --last 1 --short )
        $BORG_BIN mount $BORG_REPO::$MOUNT_ARG /tmp/$MOUNT_ARG
    else
        $BORG_BIN mount $BORG_REPO::$MOUNT_ARG /tmp/$MOUNT_ARG
    fi
}

main() {

    #Comprobar que este definido borg
    [[ ${#BORG_BIN} -eq 0 ]] && echo "${RED}Es necesario definir el ejecutable de borg" && exit;

    #Leemos variables de borg.conf
    if [ -e $CONFIG ]; then
        source $CONFIG
    else
        echo "${RED}No existe el archivo de configuración $CONFIG"
        exit;
    fi

    export BORG_RSH='ssh -oBatchMode=yes -oStrictHostKeyChecking=no'
    export BORG_REPO="ssh://$USER@$SERVER:$PORT$REPO"
    export BORG_PASSPHRASE="$REPO_PASS"

    main_loop

}

#Asignamos argumentos a variables
while [[ "$1" ]]; do
    case "$1" in
         -c | --config)
            CONFIG=$2
            shift ;;
        info )
            INFO_ARG=$2
            borg_info
            exit ;;
        list )
            LIST_ARG=$2
            borg_list
            exit ;;
        mount )
            MOUNT_ARG=$2
            borg_mount
            exit ;;
        -v | --version)
            echo $VERSION && exit ;;
        -h | --help)
            show_help && exit ;;
        -* )
            echo "Argumento invalido $1" && exit ;;
    esac
    shift
done

#Correr funcion main
main